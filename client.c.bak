#include <arpa/inet.h>
#include <ctype.h>
#include <netdb.h>
#include <netinet/in.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <stdbool.h>
#include <stdlib.h>
#include <strings.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#define MAXLINE 4096 /* max text line length */
#define HOSTMAX 255
#define IPMAX 128
#define SERVICEMAX 32
#define DESTINATION 1
#define PORT 2
#define SECONDARY_DESTINATION 3
#define SECONDARY_PORT 4

void parse_args(int, char **, int *, int *, char **, char **, char **, bool *);
bool validate_portnumber(char **, int);
void get_ip_from_hostname(char *, char *);
void read_response(char *, char *, int, char []);

int main(int argc, char **argv) {
  bool hostname_set = false;
  char recvline[MAXLINE + 1];
  char *hostname = (char *) malloc(HOSTMAX);
  char *secondary_hostname = (char *) malloc(HOSTMAX);
  char *ip_address = (char *) malloc(IPMAX);
  int sockfd;
  int port_num = -1;
  int secondary_port_num = -1;
  struct sockaddr_in servaddr;

  parse_args(argc, argv, &port_num, &secondary_port_num, &ip_address, &hostname, &secondary_hostname, &hostname_set);

  if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    printf("socket error\n");
    exit(1);
  }

  bzero(&servaddr, sizeof(servaddr));
  servaddr.sin_family = AF_INET;
  servaddr.sin_port = htons(port_num); /* daytime server */

  // copy ip address to servaddr struct
  if (inet_pton(AF_INET, ip_address, &servaddr.sin_addr) <= 0) {
    printf("inet_pton error for %s\n", argv[DESTINATION]);
    exit(1);
  }

  // connect to socket
  if (connect(sockfd, (struct sockaddr *) &servaddr, sizeof(servaddr)) < 0) {
    printf("connect error\n");
    exit(1);
  }

  // if ip address specified as destination, lookup hostname
  if (!hostname_set) {
    char service_type[SERVICEMAX];
    getnameinfo((struct sockaddr *) &servaddr, sizeof(servaddr), hostname, HOSTMAX, service_type, SERVICEMAX, 0);
  }

  read_response(hostname, ip_address, sockfd, recvline);

  exit(0);
}

void parse_args(int argc, char **argv, int *port_num, int *secondary_port_num, char **ip_address, char **hostname, 
  char **secondary_hostname, bool *hostname_set) {
  
  if (argc < 3) {
    printf("usage: client [<tunnel name/ip> <tunnel port>] <server name/ip> <server port>\n");
    exit(1);
  }

  if (validate_portnumber(argv, PORT)) {
    *port_num = atoi(argv[PORT]);
  }
  else {
    exit(1);
  }

  // set hostname and ip address for destination (tunnel or server)
  if (!isdigit(argv[DESTINATION][0])) { 
    *hostname = argv[DESTINATION];
    *hostname_set = true;

    // get ip address from hostname
    get_ip_from_hostname(argv[DESTINATION], *ip_address);
  }
  else {  // user specified an ip address and port
    *ip_address = argv[DESTINATION];
  }

  if (argc == 5) { // communicate via tunnel
    if (validate_portnumber(argv, SECONDARY_PORT)) {
      *secondary_port_num = atoi(argv[SECONDARY_PORT]);
    }
    else {
      exit(1);
    }

    if (!isdigit(argv[SECONDARY_DESTINATION][0])) {
      *secondary_hostname = argv[SECONDARY_DESTINATION];
    }
  }
}

bool validate_portnumber(char **argv, int port_type) {
  for (int i = 0; argv[port_type][i] != '\0'; i++) {
    if (!isdigit(argv[port_type][i])) {
      puts("Port number must be an integer");
      return false;
    }
  }
  int port = atoi(argv[port_type]);

  if (port < 1024) {
    puts("Port number must be greater than 1024");
    return false;
  }

  return true;
}

void get_ip_from_hostname(char *dest, char *ip_address) {
  struct addrinfo info, *infoptr;
  memset(&info, 0, sizeof(info));

  int error = getaddrinfo(dest, NULL, &info, &infoptr);
  if (error) {
    fprintf(stderr, "getaddrinfo() error: %s\n", gai_strerror(error));
    exit(1);
  }

  struct addrinfo *ptr;
  char service[SERVICEMAX];

  for (ptr = infoptr; ptr != NULL; ptr = ptr->ai_next) {
    getnameinfo(ptr->ai_addr, ptr->ai_addrlen, ip_address, IPMAX, service, SERVICEMAX, NI_NUMERICHOST);
  }

  freeaddrinfo(infoptr);
}

void read_response(char *hostname, char *ip_address, int sockfd, char recvline[]) {
  printf("Server Name: %s\n", hostname);
  printf("IP Address: %s\n", ip_address);
  printf("Time: ");

  int n;

  while ((n = read(sockfd, recvline, MAXLINE)) > 0) {
    recvline[n] = 0; /* null terminate */
    
    if (fputs(recvline, stdout) == EOF) {
      printf("fputs error\n");
      exit(1);
    }
  }

  if (n < 0) {
    printf("read error\n");
    exit(1);
  }
}